@startuml
skinparam BackgroundColor #F8F8F8
skinparam  Shadowing false
skinparam RoundCorner 3
skinparam noteBorderColor Khaki
skinparam noteBackgroundColor #FCF3CF
skinparam noteFontName Courier
skinparam noteFontSite 4

skinparam class {
BackgroundColor white
ArrowColor CornFlowerBlue
BorderColor #C8C8C8
BorderThickness 1.5
HeaderBackgroundColor LightGrey
}

class Client{}
interface Product{
  + operate()
}

interface Creator {
  + method1()
  + createProduct(): Product
}

class Product1Factory {
  + createProduct(): Product
}
class Product2Factory{
  + createProduct(): Product
}

class ConcreteProduct2{}

class ConcreteProduct1 {}

Product <|-- ConcreteProduct1
Product <|-- ConcreteProduct2

Creator <|-- Product1Factory
Creator <|-- Product2Factory

'Product1Factory .. ConcreteProduct1 :instantiates
'Product2Factory .. ConcreteProduct2 :instantiates

Client -l-> Creator
Client ..> Product
Creator *-r-> Product

note right of Client
  var product = creator.createProduct();
  creator.operate();
end note



newpage

skinparam BackgroundColor #F8F8F8
skinparam  Shadowing false
skinparam RoundCorner 3
skinparam noteBorderColor Khaki
skinparam noteBackgroundColor #FCF3CF
skinparam noteFontName Courier
skinparam noteFontSite 4

skinparam class {
BackgroundColor white
ArrowColor CornFlowerBlue
BorderColor #C8C8C8
BorderThickness 1.5
HeaderBackgroundColor LightGrey
}

note as N1
All the products are
created by one Factory class
end note

class Client{}
interface Creator{
  + createProduct(Parameter)
}

class ProductFactory {
  + createProduct(Parameter)
}

interface Product{
  + operate()
}

class ConcreteProduct1{}
class ConcreteProduct2{}

Client -r- Creator
Creator <|-- ProductFactory

Creator -r- Product
Product <|-- ConcreteProduct1
Product <|-- ConcreteProduct2

note left of ProductFactory::createProduct
  switch(parameter) {
    case x:
      return new ConcreteProduct1();
    case y:
      return new ConcreteProduct2();
  }
end note

@enduml