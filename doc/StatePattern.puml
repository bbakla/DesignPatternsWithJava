@startuml

skinparam BackgroundColor #F8F8F8
skinparam  Shadowing false
skinparam RoundCorner 3
skinparam noteBorderColor Khaki
skinparam noteBackgroundColor #FCF3CF
skinparam noteFontName Courier
skinparam noteFontSite 4

skinparam class {
BackgroundColor white
ArrowColor CornFlowerBlue
BorderColor #C8C8C8
BorderThickness 1.5
HeaderBackgroundColor LightGrey
}

title Context holds all the states

interface State {
  + handleState1Operation()
  + handleState2Operation()
}

class State1{
 - context:Context
 + State1(Context)
 + handleState1Operation()
 + handleState2Operation()
}
class State2{
 - context:Context
 + State2(Context)
 + handleState1Operation()
 + handleState2Operation()
 }


class Context {
  - states:List<State>
  - currentState:State
  + Context(State)
  + changeState(State)
  + handleState1Operation()
  + handleState2Operation()
}

note as N1
States may have the context object to set its
next state but it can also be handled
by context so states are not responsible for
context state changes.
object
end note

note left of State1::handleState1Operation
   ...
   context.changeState(nextState)
end note

note left of State1::handleState2Operation
    not implemented message
end note

note right of State2::handleState1Operation
    not implemented message
end note

note left of Context::handleState1Operation
   state1.handleState1Operation()
end note

note left of Context::handleState2Operation
   state2.handleState2Operation()
end note

State <|-- State1
State <|-- State2
State1 .r. State2 : calls
Context *-r->State
Context <.. State1
Context <.. State2

newpage

skinparam BackgroundColor #F8F8F8
skinparam  Shadowing false
skinparam RoundCorner 3
skinparam noteBorderColor Khaki
skinparam noteBackgroundColor #FCF3CF
skinparam noteFontName Courier
skinparam noteFontSite 4

skinparam class {
BackgroundColor white
ArrowColor CornFlowerBlue
BorderColor #C8C8C8
BorderThickness 1.5
HeaderBackgroundColor LightGrey
}

interface State {
  + handle(Context)
}

class State1{
  + handle(Context)
}

class State2{
  + handle(Context)
}

class Context{
  - state:State
  + handle()
  + setState(State)
}

note right of State2::handle
            ...
  context.setState(new State2());
end note

note left of Context::handle
  state.handle(this);
end note

State <|-- State1
State <|-- State2
State1 .r. State2 : calls
Context *-r-> State
Context <.. State1
Context <.. State2




@enduml


