@startuml

skinparam BackgroundColor #F8F8F8
skinparam  Shadowing false
skinparam RoundCorner 3
skinparam noteBorderColor Khaki
skinparam noteBackgroundColor #FCF3CF
skinparam noteFontName Courier
skinparam noteFontSite 4

skinparam class {
BackgroundColor white
ArrowColor CornFlowerBlue
BorderColor #C8C8C8
BorderThickness 1.5
HeaderBackgroundColor LightGrey
}

note as N1
observer may also have subscribe()
and can subscribe itself but not a
good design
end note

interface Subject {
  + subscribe(Observer)
  + unsubscribe(id)
  + publish()
}

interface Observer{
  + notified()
}

class ConcreteObserver1 {
  + notified()
}


class ConcreteObserver2 {
    + notified()
}
class ConcreteSubject {
  - observers:List<Observer>
  + subscribe(Observer)
  + publish()
}

'note left of ConcreteObserver2::subscribe
'  subscribe.subscribe(this)
'end note

note left of ConcreteSubject::subscribe
  observers.add(observer)
end note

note left of ConcreteSubject::publish
  observers.forEach(o -> o.notified())
end note

Subject <|-- ConcreteSubject
Observer <|-- ConcreteObserver1
Observer <|-- ConcreteObserver2
Subject o-r-> Observer

newpage

skinparam BackgroundColor #F8F8F8
skinparam  Shadowing false
skinparam RoundCorner 3
skinparam noteBorderColor Khaki
skinparam noteBackgroundColor #FCF3CF
skinparam noteFontName Courier
skinparam noteFontSite 4

skinparam class {
BackgroundColor white
ArrowColor CornFlowerBlue
BorderColor #C8C8C8
BorderThickness 1.5
HeaderBackgroundColor LightGrey
}

interface Subject {
  + subscribe(Observer)
  + unsubscribe(id)
  + publish()
}
class ConcreteSubject {
  - observers:List<Observer>
  - changeManager:ChangeManager
  + subscribe(Observer)
  + publish()
}

interface ChangeManager {
  + publish(Observer)
  + subscribe(Observer)
  + unsubscribe(id)
}

class ConcreteChangeManager {
  - Subject
  + ConcreteChangeManager(Subject)
  + publish(Observer)
  + subscribe(Observer)
}

interface Observer{
  + notified()
}

class ConcreteObserver1 {
  - changeManager:ChangeManager
  + notified()
}

class ConcreteObserver2 {
    - changeManager:ChangeManager
    + notified()
}

Subject <|-- ConcreteSubject
Observer <|-- ConcreteObserver1
Observer <|-- ConcreteObserver2
ChangeManager <|-- ConcreteChangeManager

Subject *-r-> ChangeManager
ChangeManager o-r-> Observer





@enduml